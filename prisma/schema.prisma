  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
  }

  model User {
    id String @id @unique
    name String?
    email String @unique
    stripeCustomerid String? @unique
    Subscription Subscription? 
    companyId String
    company Company @relation(fields: [companyId] , references: [id])
    ratings Rating[]
    customer Customer[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

  }

  model Subscription {
    stripeSubscriptionid String @id @unique
    interval String
    status String
    planid String
    companyId String @unique
    company Company @relation(fields: [companyId] , references: [id]) 
    currentperiodstart Int
    currentperiodend Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userid] , references: [id])
    userid String @unique 
    apikey String @unique
    
  }
  
  model Company {
    id String @id @unique
    name String
    users User[]
    subscription Subscription?
    customers Customer[]
    webhook Webhook[]
  }

  model Customer {
    id Int @id @default(autoincrement())
    name String
    email String @unique
    companyId String
    company Company @relation(fields: [companyId] , references: [id])
    user User @relation(fields: [userid] , references: [id])
    userid String
    ratings Rating[]
    churnRate Float
    upsellRate Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

  }

  model Rating{
    id Int @id @default(autoincrement())
    paymentHistory Float
    averageOrderValue Float
    lifetimeValue      Float
    purchaseFrequency  Float
    supportTickets     Int
    feedbackScores     Float 
    returnRate         Float
    referralRate       Float
    contractLength     Int  
    renewalRate        Float
    overallScore       Float
    userid String 
    customerId Int
    customer Customer @relation(fields: [customerId] , references: [id])
    user User @relation(fields: [userid] , references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

  }


  model Webhook {
  id         String   @id @default(uuid())
  url        String
  events     String[]
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
