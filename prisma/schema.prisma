  

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
  }

model User {
  id               String               @id @unique
  name             String?
  email            String               @unique
  stripeCustomerid String?              @unique
  Subscription     Subscription[]
  companyId        String
  company          Company              @relation(fields: [companyId], references: [id])
  ratings          Rating[]
  customers        Customer[]
  orderValue         OrderValue[]
  productUsages        ProductUsage[]
  purchaseFrequencies  PurchaseFrequency[]
  renewalRates         RenewalRate[]
  returnRates          ReturnRate[]
  upsellOpportunities  UpsellOpportunity[]
  accountHealth        AccountHealth[]
  contractLength       Contract[]
  customerEngagement   CustomerEngagement[]
  feedbackScores       FeedbackScores[]
  customerSuccess       CustomerSuccess[]
  lifetimeValue        LifetimeValue[]
  averageOrderValue    AverageOrderValue[]
  dataSync             DataSync[]
  supporTicket         SupportTicket[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}


model Customer {
  id               Int                  @id @default(autoincrement())
  name             String
  email            String               @unique
  companyId        String
  company          Company              @relation(fields: [companyId], references: [id])
  userId           String
  user             User                 @relation(fields: [userId], references: [id])
  ratings          Rating[]
  paymentHistories PaymentHistory[]
  orderValue         OrderValue[]
  productUsages        ProductUsage[]
  purchaseFrequencies  PurchaseFrequency[]
  renewalRates         RenewalRate[]
  returnRates          ReturnRate[]
  upsellOpportunities  UpsellOpportunity[]
  accountHealth        AccountHealth[]
  contractLength Contract[]
  customerEngagement CustomerEngagement[]
  feedbackScores FeedbackScores[]
  customerSuccess CustomerSuccess[]
  lifetimeValue LifetimeValue[]
  averageOrderValue AverageOrderValue[]
  supportTicket SupportTicket[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}


  model Subscription {
    stripeSubscriptionid String @id @unique
    interval String
    status String
    planid String
    currentperiodstart Int
    currentperiodend Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userid] , references: [id])
    userid String @unique 
    apikey String @unique
    
  }
  
  model Company {
    id String @id @default(uuid())
    name String
    users User[]
    customers Customer[]
    ratingCategory RatingCategory[]
    webhook Webhook[]
  }


model Rating {
  id Int @id @default(autoincrement())
  value Float
  category RatingCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  period RatingPeriod @relation(fields: [periodId], references: [id])
  periodId String
  userid String
  customerId Int
  customer Customer @relation(fields: [customerId], references: [id])
  user User @relation(fields: [userid], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New models
model RatingCategory {
  id String @id @default(uuid())
  name String
  description String?
  weightage Float
  company Company @relation(fields: [companyId], references: [id])
  companyId String
  ratings Rating[]
}

model RatingPeriod {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  ratings Rating[]
}

model PaymentHistory {
  id            Int      @id @default(autoincrement())
  customerId    Int
  timelyPayments Int
  latePayments   Int
  totalAmount   Float
  paymentDates  DateTime[]
  userid        String
  customer Customer @relation(fields: [customerId] , references: [id])
  createdAt     DateTime @default(now())
}

model OrderValue {
  id           Int      @id @default(autoincrement())
  customerId   Int
  orderValue   Float
  orderDate    DateTime
  updateDate   DateTime?
  cancelDate   DateTime?
  status       String   // e.g., 'placed', 'updated', 'cancelled'
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  customer     Customer @relation(fields: [customerId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}




model SupportTicket {
  id                Int      @id @default(autoincrement())
  customerId        Int
  ticketId          String   @unique
  createdAt         DateTime @default(now())
  resolvedAt        DateTime?
  satisfactionScore Float?
  lastUpdate        DateTime?
  userId            String
  customer Customer @relation(fields: [customerId], references: [id])
  user User @relation(fields: [userId], references: [id])
}



model ReferralRate {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfReferrals Int
  referralDetails String[]
  referralDates DateTime[]
  userid        String
  createdAt     DateTime @default(now())
}


model AccountHealth {
  id            Int      @id @default(autoincrement())
  customerId    Int
  healthScore   Float
  status        String   // e.g., "Good", "At Risk", "Critical"
  details       Json     // Additional information about account health
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Contract {
  id               Int      @id @default(autoincrement())
  customerId       Int
  contractLength   Int
  startDate        DateTime
  endDate          DateTime
  renewalDate      DateTime?
  terminationDate  DateTime?
  status           String   @default("active")
  userId           String
  createdAt        DateTime @default(now())
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model CustomerEngagement {
  id            Int      @id @default(autoincrement())
  customerId    Int
  engagementScore Float  // Score representing engagement level
  lastEngaged   DateTime // Last date of engagement
  details       Json     // Additional details on engagement
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model CustomerSuccess {
  id            Int      @id @default(autoincrement())
  customerId    Int
  successScore  Float    // Score indicating customer success
  milestone     String   // Description of success milestone
  achievedAt    DateTime // Date when the milestone was achieved
  details       Json     // Additional details about success
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model FeedbackScores {
  id            Int      @id @default(autoincrement())
  customerId    Int
  feedbackScore Float    // Numerical score of the feedback
  feedbackDate  DateTime // Date when feedback was given
  feedbackType  String   // Type of feedback (e.g., "Service", "Product")
  details       Json     // Additional details about feedback
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model DataSync {
  id            Int      @id @default(autoincrement())
  syncType      String   // Type of data sync (e.g., "Manual", "Scheduled")
  status        String   // Status of the sync (e.g., "Completed", "Failed")
  details       Json     // Details of the sync operation
  syncDate      DateTime @default(now()) // Date when sync occurred
  createdAt     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model LifetimeValue {
  id            Int      @id @default(autoincrement())
  customerId    Int
  totalRevenue  Float    // Total revenue from the customer
  startDate     DateTime // Start date of lifetime value tracking
  endDate       DateTime? // End date of lifetime value tracking (optional)
  details       Json     // Additional details about lifetime value
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model AverageOrderValue {
  id            Int      @id @default(autoincrement())
  customerId    Int
  totalAmount   Float    // Total amount spent by the customer
  orderCount    Int      // Number of orders made by the customer
  averageValue  Float    // Average order value
  orderDates    DateTime[]
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model ProductUsage {
  id             Int      @id @default(autoincrement())
  customerId     Int
  featureUsed    String
  usageDuration  Float
  usageDate      DateTime
  userId         String
  createdAt      DateTime @default(now())
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model PurchaseFrequency {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfPurchases Int  // Number of purchases made
  purchaseDates DateTime[] // Dates of each purchase
  frequency     String   // e.g., weekly, monthly
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model RenewalRate {
   id                Int      @id @default(autoincrement())
  customerId        Int
  renewalRate       Float    // The updated renewal rate
  lastRenewalUpdate DateTime // Date of the last update
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model ReturnRate {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfReturns Int    // Number of returns
  totalOrders   Int      // Total number of orders
  returnDates   DateTime[] // Dates of returns
  returnDetails Json     // Additional details about returns
  createdAt     DateTime @default(now())
  userId        String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}


model UpsellOpportunity {
  id           String   @id @default(uuid())
  customerId   Int
  opportunityId String @unique
  createdAt    DateTime @default(now())
  status       String
  lossReason   String?
  lossDate     DateTime?
  userId       String
  customer      Customer @relation(fields: [customerId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}





model Webhook {
  id         String   @id @default(uuid())
  url        String @unique
  events     String[]
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}




