  

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
  }

  model User {
    id String @id @unique
    name String?
    email String @unique
    stripeCustomerid String? @unique
    Subscription Subscription[]
    companyId String
    company Company @relation(fields: [companyId] , references: [id])
    ratings Rating[]
    customer Customer[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

  }

  model Subscription {
    stripeSubscriptionid String @id @unique
    interval String
    status String
    planid String
    currentperiodstart Int
    currentperiodend Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userid] , references: [id])
    userid String @unique 
    apikey String @unique
    
  }
  
  model Company {
    id String @id @default(uuid())
    name String
    users User[]
    customers Customer[]
    ratingCategory RatingCategory[]
    webhook Webhook[]
  }

  model Customer {
    id Int @id @default(autoincrement())
    name String
    email String @unique
    companyId String
    company Company @relation(fields: [companyId] , references: [id])
    user User @relation(fields: [userid] , references: [id])
    userid String
    ratings Rating[]
    churnRate Float
    upsellRate Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

  }


model Rating {
  id Int @id @default(autoincrement())
  value Float
  category RatingCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  period RatingPeriod @relation(fields: [periodId], references: [id])
  periodId String
  userid String
  customerId Int
  customer Customer @relation(fields: [customerId], references: [id])
  user User @relation(fields: [userid], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New models
model RatingCategory {
  id String @id @default(uuid())
  name String
  description String?
  weightage Float
  company Company @relation(fields: [companyId], references: [id])
  companyId String
  ratings Rating[]
}

model RatingPeriod {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  ratings Rating[]
}

model PaymentHistory {
  id            Int      @id @default(autoincrement())
  customerId    Int
  timelyPayments Int
  latePayments   Int
  totalAmount   Float
  paymentDates  DateTime[]
  userid        String
  createdAt     DateTime @default(now())
}

model AverageOrderValue {
  id            Int      @id @default(autoincrement())
  customerId    Int
  totalAmount   Float
  orderCount    Int
  orderDates    DateTime[]
  userid        String
  createdAt     DateTime @default(now())
}

model LifetimeValue {
  id            Int      @id @default(autoincrement())
  customerId    Int
  totalRevenue  Float
  startDate     DateTime
  endDate       DateTime?
  userid        String
  createdAt     DateTime @default(now())
}

model PurchaseFrequency {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfPurchases Int
  purchaseDates DateTime[]
  frequency     String // e.g., weekly, monthly
  userid        String
  createdAt     DateTime @default(now())
}

model SupportTickets {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfTickets Int
  resolutionTime Float
  ticketCategories String[]
  ticketDates   DateTime[]
  userid        String
  createdAt     DateTime @default(now())
}

model FeedbackScores {
  id            Int      @id @default(autoincrement())
  customerId    Int
  feedbackScore Float
  feedbackDate  DateTime
  feedbackType  String 
  userid        String
  createdAt     DateTime @default(now())
}

model ReturnRate {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfReturns Int
  totalOrders   Int
  returnDates   DateTime[]
  userid        String
  createdAt     DateTime @default(now())
}

model ReferralRate {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfReferrals Int
  referralDetails String[]
  referralDates DateTime[]
  userid        String
  createdAt     DateTime @default(now())
}

model ContractLength {
  id            Int      @id @default(autoincrement())
  customerId    Int
  startDate     DateTime
  endDate       DateTime
  contractDetails String
  userid        String
  createdAt     DateTime @default(now())
}

model RenewalRate {
  id            Int      @id @default(autoincrement())
  customerId    Int
  numberOfRenewals Int
  renewalDates  DateTime[]
  contractDetails String
  userid        String
  createdAt     DateTime @default(now())
}




  model Webhook {
  id         String   @id @default(uuid())
  url        String @unique
  events     String[]
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}




